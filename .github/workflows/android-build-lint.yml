name: Android Build & Lint

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build APK
        run: ./gradlew :composeApp:assembleDebug --stacktrace --info

      - name: Run ktlint and capture output
        id: ktlint-check
        run: |
          echo "Running ktlint check..."
          ./gradlew ktlintCheck --continue > ktlint-report.txt 2>&1 || true
          
          # Extract ktlint issues from the output
          if grep -E "\.kt:[0-9]+:[0-9]+" ktlint-report.txt > ktlint-issues.txt; then
            # Count issues
            ISSUE_COUNT=$(wc -l < ktlint-issues.txt | tr -d ' ')
            # Ensure ISSUE_COUNT is a valid number
            if ! [[ "$ISSUE_COUNT" =~ ^[0-9]+$ ]]; then
              ISSUE_COUNT=0
            fi
            echo "issue_count=${ISSUE_COUNT}" >> $GITHUB_OUTPUT
            echo "status=issues_found" >> $GITHUB_OUTPUT
          else
            echo "No ktlint issues found" > ktlint-issues.txt
            echo "issue_count=0" >> $GITHUB_OUTPUT
            echo "status=clean" >> $GITHUB_OUTPUT
          fi

      - name: Auto-format code if needed
        if: steps.ktlint-check.outputs.status == 'issues_found'
        run: ./gradlew ktlintFormat --continue

      - name: Generate ktlint report
        if: always()
        run: |
          echo "# 🤖 Ktlint Code Review Report" > ktlint-comment.md
          echo "" >> ktlint-comment.md
          
          if [ "${{ steps.ktlint-check.outputs.status }}" == "clean" ]; then
            echo "✅ **Great job!** Your code follows all Kotlin coding standards." >> ktlint-comment.md
            echo "" >> ktlint-comment.md
            echo "No ktlint issues found in this pull request." >> ktlint-comment.md
          else
            echo "⚠️ **Code Style Issues Found**" >> ktlint-comment.md
            echo "" >> ktlint-comment.md
            echo "Found ${{ steps.ktlint-check.outputs.issue_count }} ktlint issues that should be addressed:" >> ktlint-comment.md
            echo "" >> ktlint-comment.md
            echo "### Issues:" >> ktlint-comment.md
            echo "\`\`\`" >> ktlint-comment.md
            head -20 ktlint-issues.txt >> ktlint-comment.md
            echo "\`\`\`" >> ktlint-comment.md
            echo "" >> ktlint-comment.md
            echo "### 🔧 How to fix:" >> ktlint-comment.md
            echo "1. Run \`./gradlew ktlintFormat\` to auto-fix most issues" >> ktlint-comment.md
            echo "2. For issues that can't be auto-fixed, please address them manually" >> ktlint-comment.md
            echo "3. Some generated files may be excluded from ktlint checks" >> ktlint-comment.md
          fi
          echo "" >> ktlint-comment.md
          echo "---" >> ktlint-comment.md
          echo "*This comment was generated by the ktlint code review bot* 🤖" >> ktlint-comment.md

      - name: Comment on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync('ktlint-comment.md', 'utf8');
            
            // Find existing bot comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.data.find(
              comment => comment.body.includes('This comment was generated by the ktlint code review bot')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Upload ktlint artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ktlint-reports
          path: |
            ktlint-report.txt
            ktlint-issues.txt
            ktlint-comment.md
          retention-days: 30

      - name: Build should succeed regardless of lint
        run: echo "Build completed. Check ktlint output for code style suggestions." 