name: Code Review Bot

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_run:
    workflows: ["Android Build & Lint"]
    types: [completed]

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: read

jobs:
  code-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Analyze changed files
        id: analyze
        run: |
          # Get the base branch for comparison
          BASE_BRANCH="${{ github.event.pull_request.base.ref || 'main' }}"
          echo "Comparing against base branch: $BASE_BRANCH"
          
          # Fetch the base branch
          git fetch origin $BASE_BRANCH:$BASE_BRANCH || git fetch origin $BASE_BRANCH
          
          # Get list of changed Kotlin files in this PR only
          if git diff --name-only origin/$BASE_BRANCH...HEAD | grep -E '\.kt$' > changed-files.txt; then
            # Count changed files
            CHANGED_COUNT=$(wc -l < changed-files.txt | tr -d ' ')
            echo "changed_count=${CHANGED_COUNT}" >> $GITHUB_OUTPUT
            echo "📁 Changed Kotlin files in this PR:"
            cat changed-files.txt | while read file; do
              if [ -f "$file" ]; then
                echo "  ✅ $file"
              else
                echo "  ❌ $file (deleted)"
              fi
            done
          else
            echo "No Kotlin files changed in this PR" > changed-files.txt
            echo "changed_count=0" >> $GITHUB_OUTPUT
            echo "🎯 No Kotlin files changed in this PR"
          fi
          
          # Also save list of all changed files for context
          git diff --name-only origin/$BASE_BRANCH...HEAD > all-changed-files.txt || echo "No files changed" > all-changed-files.txt

      - name: Run ktlint analysis on changed files only
        if: steps.analyze.outputs.changed_count != '0' && steps.analyze.outputs.changed_count != ''
        run: |
          echo "Running ktlint analysis on changed files only..."
          
          # Initialize the report
          echo "# 🔍 Ktlint Analysis for Changed Files" > review-summary.md
          echo "" >> review-summary.md
          echo "## 📊 Analysis Summary" >> review-summary.md
          echo "- **Files analyzed:** ${{ steps.analyze.outputs.changed_count }}" >> review-summary.md
          echo "" >> review-summary.md
          
          # Initialize counters
          TOTAL_ISSUES=0
          FILES_WITH_ISSUES=0
          
          # Create temporary file for detailed issues
          > detailed-issues.txt
          
          # Analyze each changed file individually using ktlint directly
          while IFS= read -r file; do
            if [ -n "$file" ] && [ "$file" != "No Kotlin files changed" ] && [ -f "$file" ]; then
              echo "🔍 Analyzing: $file"
              
              # Use ktlint CLI directly on the specific file for more precise output
              if command -v ktlint >/dev/null 2>&1; then
                # If ktlint CLI is available, use it directly
                FILE_OUTPUT=$(ktlint --format --reporter=plain "$file" 2>&1 || true)
              else
                # Fallback to gradle but filter output more precisely
                FILE_OUTPUT=$(./gradlew ktlintCheck 2>&1 | grep -E "($file|$file:)" || true)
              fi
              
              if [ -n "$FILE_OUTPUT" ] && echo "$FILE_OUTPUT" | grep -q "$file"; then
                # Count issues for this file
                FILE_ISSUES=$(echo "$FILE_OUTPUT" | grep -c "$file" || echo "0")
                if [ "$FILE_ISSUES" -gt 0 ]; then
                  TOTAL_ISSUES=$((TOTAL_ISSUES + FILE_ISSUES))
                  FILES_WITH_ISSUES=$((FILES_WITH_ISSUES + 1))
                  
                  # Store detailed output
                  echo "### 📄 \`$file\`" >> detailed-issues.txt
                  echo "" >> detailed-issues.txt
                  echo "\`\`\`" >> detailed-issues.txt
                  echo "$FILE_OUTPUT" >> detailed-issues.txt
                  echo "\`\`\`" >> detailed-issues.txt
                  echo "" >> detailed-issues.txt
                fi
              else
                echo "✅ $file - No issues found"
              fi
            fi
          done < changed-files.txt
          
          # Update summary with results
          echo "- **Files with issues:** $FILES_WITH_ISSUES" >> review-summary.md
          echo "- **Total issues found:** $TOTAL_ISSUES" >> review-summary.md
          echo "- **Clean files:** $(($(cat changed-files.txt | wc -l) - FILES_WITH_ISSUES))" >> review-summary.md
          echo "" >> review-summary.md
          
          # Add detailed issues if any exist
          if [ "$TOTAL_ISSUES" -gt 0 ]; then
            echo "## 🚨 Issues Found" >> review-summary.md
            echo "" >> review-summary.md
            echo "> **Note:** Only showing issues in files changed by this PR" >> review-summary.md
            echo "" >> review-summary.md
            cat detailed-issues.txt >> review-summary.md
            
            echo "### 🔧 Quick Fix" >> review-summary.md
            echo "" >> review-summary.md
            echo "Run this command to auto-fix most formatting issues:" >> review-summary.md
            echo "\`\`\`bash" >> review-summary.md
            echo "./gradlew ktlintFormat" >> review-summary.md
            echo "\`\`\`" >> review-summary.md
            echo "" >> review-summary.md
          else
            echo "## ✅ Perfect! No Issues Found" >> review-summary.md
            echo "" >> review-summary.md
            echo "🎉 All changed files follow Kotlin coding standards perfectly!" >> review-summary.md
            echo "" >> review-summary.md
            echo "### Changed Files:" >> review-summary.md
            while IFS= read -r file; do
              if [ -n "$file" ] && [ "$file" != "No Kotlin files changed" ]; then
                echo "- ✅ \`$file\`" >> review-summary.md
              fi
            done < changed-files.txt
            echo "" >> review-summary.md
          fi

      - name: Generate code quality insights
        run: |
          echo "" >> review-summary.md
          echo "## 📈 PR Change Summary" >> review-summary.md
          echo "" >> review-summary.md
          
          # Count different types of files changed in this PR
          BASE_BRANCH="${{ github.event.pull_request.base.ref || 'main' }}"
          TOTAL_FILES=$(git diff --name-only origin/$BASE_BRANCH...HEAD | wc -l | tr -d ' ')
          KOTLIN_FILES=$(git diff --name-only origin/$BASE_BRANCH...HEAD | grep -E '\.kt$' | wc -l | tr -d ' ' || echo "0")
          GRADLE_FILES=$(git diff --name-only origin/$BASE_BRANCH...HEAD | grep -E '\.gradle|\.gradle\.kts$' | wc -l | tr -d ' ' || echo "0")
          YAML_FILES=$(git diff --name-only origin/$BASE_BRANCH...HEAD | grep -E '\.yml|\.yaml$' | wc -l | tr -d ' ' || echo "0")
          XML_FILES=$(git diff --name-only origin/$BASE_BRANCH...HEAD | grep -E '\.xml$' | wc -l | tr -d ' ' || echo "0")
          
          echo "- **Total files changed in PR:** $TOTAL_FILES" >> review-summary.md
          echo "- **Kotlin files:** $KOTLIN_FILES" >> review-summary.md
          echo "- **Gradle files:** $GRADLE_FILES" >> review-summary.md
          echo "- **YAML files:** $YAML_FILES" >> review-summary.md
          echo "- **XML files:** $XML_FILES" >> review-summary.md
          echo "" >> review-summary.md
          
          # Add lines of code changed
          ADDITIONS=$(git diff --shortstat origin/$BASE_BRANCH...HEAD | grep -o '[0-9]* insertion' | grep -o '[0-9]*' || echo "0")
          DELETIONS=$(git diff --shortstat origin/$BASE_BRANCH...HEAD | grep -o '[0-9]* deletion' | grep -o '[0-9]*' || echo "0")
          
          echo "### 📊 Code Changes" >> review-summary.md
          echo "- **Lines added:** +$ADDITIONS" >> review-summary.md
          echo "- **Lines removed:** -$DELETIONS" >> review-summary.md
          echo "" >> review-summary.md
          
          # Add actionable recommendations
          echo "## 💡 Developer Guidelines" >> review-summary.md
          echo "" >> review-summary.md
          echo "### 🔧 Before Committing" >> review-summary.md
          echo "1. **Format code:** \`./gradlew ktlintFormat\` - Auto-fixes most issues" >> review-summary.md
          echo "2. **Check locally:** \`./gradlew ktlintCheck\` - Validates formatting" >> review-summary.md
          echo "3. **Run tests:** \`./gradlew test\` - Ensures functionality" >> review-summary.md
          echo "" >> review-summary.md
          
          echo "### 🎯 This Review Covers" >> review-summary.md
          echo "- ✅ **Only files changed in this PR**" >> review-summary.md
          echo "- ✅ **Kotlin code style & formatting**" >> review-summary.md
          echo "- ✅ **Automated suggestions for fixes**" >> review-summary.md
          echo "- ❌ **Does not review**: Logic, architecture, or business requirements" >> review-summary.md
          echo "" >> review-summary.md
          echo "---" >> review-summary.md
          echo "*🤖 Automated review by Code Review Bot - Only analyzing PR changes*" >> review-summary.md

      - name: Post detailed review comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let comment = '';
            if (fs.existsSync('review-summary.md')) {
              comment = fs.readFileSync('review-summary.md', 'utf8');
            } else {
              comment = `# 🤖 Code Review Bot - PR Analysis
              
              ## ✅ Analysis Complete
              
              No Kotlin files were changed in this PR, so no ktlint analysis was needed.
              
              ### What This Bot Reviews
              - ✅ **Only files changed in this PR**
              - ✅ **Kotlin code formatting & style**
              - ❌ **Does not review the entire project**
              
              ---
              *🤖 Automated review focuses only on your PR changes*`;
            }
            
            // Find existing detailed review comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.data.find(
              comment => comment.body.includes('🤖 Code Review Bot') ||
                        comment.body.includes('Automated review by Code Review Bot')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
              console.log('✅ Updated existing PR review comment');
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
              console.log('✅ Created new PR review comment');
            }

      - name: Upload PR analysis artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pr-code-review-analysis
          path: |
            review-summary.md
            changed-files.txt
            all-changed-files.txt
            detailed-issues.txt
          retention-days: 30
